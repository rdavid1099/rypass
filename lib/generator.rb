require "#{PATH}/config/setup"

# Handles account/ username creation and respective password generation
class Generator
  # @return [String] username for which a password is being generated for
  attr_reader :username

  # @return [String] account containing the username for which a password is being generated for
  attr_reader :account

  # Initialize Generator with a destination
  #
  # @param [String] destination the path where all data will be saved - defaults to nil which is then memoized to '~/Library/RyPass' when passed to {FileIt#initialize FileIt}
  def initialize(destination = nil)
    @password_klass = Password.new
    @file_it = FileIt.new(destination)
  end

  # Create hash of data used to save a new account using {FileIt#save FileIt}
  #
  # @param [Hash] params the params for creating a new acccount
  # @option params [String] :account account name being created
  # @option params [String] :username username attached to said account for which a password is being generated for
  # @option params [Integer] :length number of characters of generated password
  # @option params [String] :destination file path of where account data will be saved using {FileIt#save FileIt}
  # @return [Hash] all data used in account creation
  def create_new_account(**params)
    @account = params[:account] || get_account_name
    @username = params[:username] || get_username
    @password ||= generate_password params[:length] || get_length
    save_information
    {
      destination: params[:destination] || '~/Library/RyPass/',
      account: @account,
      username: @username,
      password: @password
    }
  end

  # Saves given password prompting user to provide account and username information
  #
  # @param [String] password password generated by {Password#generate_new Password} class
  # @return [Hash] all data gathered and used for account creation
  def save_password(password)
    @password = password
    create_new_account
  end

  # Generates password of given length
  #
  # @param [Integer] length length of characters for generated password
  # @return [String] generated password of give length
  # @raise [RuntimeError] if given length is too high
  def generate_password(length = 12)
    password_klass.generate_new(length)
  rescue
    raise RuntimeError, Message::Error.too_many_characters
    create_new_account(account: account, username: username)
  end

  private
    attr_reader :password_klass, :file_it, :password

    def save_information
      if file_it.save(account: account.downcase, username: username.downcase, password: password)
        password
      else
        raise RuntimeError, Message::Error.general(file_it.errors.join(', '))
      end
    end

    def get_account_name
      print Message::Prompt.account_name
      STDIN.gets.chomp
    end

    def get_username
      print Message::Prompt.username(account)
      STDIN.gets.chomp
    end

    def get_length
      print Message::Prompt.password_length
      length = STDIN.gets.chomp.to_i
      length == 0 ? 12 : length
    end
end
